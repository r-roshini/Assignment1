// Importing libraries
import java.io.IOException;
import java.io.InvalidObjectException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;
import java.util.Iterator;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.mapred.JobConf;

public class Prg10{

    public static class MyMap extends MapReduceBase implements Mapper<LongWritable,Text, Text, IntWritable> {

	public void map(LongWritable key, Text value, OutputCollector<Text,IntWritable> output, Reporter rep)throws IOException
	{
	
		String data[] = value.toString().split(" "); //Mapper Input
                int count=0;

		for (String num : data)
		{
                        count++;

			int number = Integer.parseInt(num);

			
				if(count==1)
				output.collect(new Text("MAPPED-INSTANCES"), new IntWritable(number));//Mapper Output
                                
                                if(count==2)
				output.collect(new Text("EXPERIMENT"), new IntWritable(number));

                                if(count==3)
				output.collect(new Text("N"), new IntWritable(number));

                                if(count==4)
				output.collect(new Text("MAX"), new IntWritable(number));
			
		}
             count=0;
	}
}


public static class MyReduce extends MapReduceBase implements Reducer<Text,IntWritable, Text, IntWritable> {


	// Reduce Function
	public void reduce(Text key, Iterator<IntWritable> value,OutputCollector<Text, IntWritable> output, Reporter rep)throws IOException
	{

		
		int sum = 0, count = 0,int sum1=0;
		if (key.equals("MAPPED-INSTANCES")||key.equals("EXPERIMENT")||key.equals("M"))
		{
			while (value.hasNext())
			{
				IntWritable i = value.next();

	
				sum += i.get(); //adding mapped instance,no.of experiment tries,max value
			
			}
		}

		else
		{
			while (value.hasNext())
			{
				IntWritable i = value.next();

				int n1=0,n2=1,n3;
				sum1 = i.get();
				for(int j=2;j<sum1;j++)//Fibonacci series
                                 {
                                   n3=n1+n2;
                                   n1=n2;
                                   n2=n3;
                                 }
                                sum1=n3/n2 //Golden Ratio of fibonacci series fn+1/fn
			}
		}
                           sum=(sum+sum1)/4;

		// Average sum  is printed
		output.collect(key, new IntWritable(sum));
		
	}
}




public static void main(String args[]) throws Exception
	{

		JobConf conf = new JobConf(Prg10.class);
                 conf.setJobName("Assignment");
		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
		conf.setMapperClass(MyMap.class);
		conf.setReducerClass(MyReduce.class);
		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);

		JobClient.runJob(conf);
		
	}

	
	}

